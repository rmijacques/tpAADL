package lgs
public
	with PhysicalResources;
	with Base_Types;

	system digital_part
	features
		pressureCheck: in data port Base_Types::Boolean;
		h: in event port;
		gv: out event port;
end digital_part;

	system implementation digital_part.impl
	end digital_part.impl;

	thread group GestionRoues
		features
			h: in event port;
			gv: out event port;
	end GestionRoues;

	thread group implementation GestionRoues.impl

	end GestionRoues.impl;

	process DigitalPartProcess
		features
			h: in event port;
			gv: out event port;
	end DigitalPartProcess;

	process implementation DigitalPartProcess.impl
	end DigitalPartProcess.impl;

	system CommutateurAnalogique
		features
			general_ev_in: in data port;
			general_ev_out: out data port;
			handle: in event port;
	end CommutateurAnalogique;

	system implementation CommutateurAnalogique.impl
		subcomponents
			procCA: process CommutateurAnalogiqueProcess.impl;
		connections
			CommutateurAnalogique_impl_new_connection: port handle -> procCA.handle;
			CommutateurAnalogique_impl_new_connection2: port general_ev_in -> procCA.general_ev_in;
			CommutateurAnalogique_impl_new_connection3: port procCA.general_ev_out -> general_ev_out;
	end CommutateurAnalogique.impl;

	thread group GestionCommutateurAnalogique
		features
			general_ev_in: in data port;
			general_ev_out: out data port;
			handle: in event port;
	end GestionCommutateurAnalogique;

	thread group implementation GestionCommutateurAnalogique.impl
		subcomponents
			ThreadOpenToIntermediate1: thread ThreadOpenToIntermediate1.impl;
			Intermediate1ToClosed: thread ThreadIntermediate1ToClosed.impl;
			ClosedToIntermediate2: thread ThreadClosedToIntermediate2.impl;
			Intermediate2ToOpen: thread ThreadIntermediate2ToOpen.impl;
			Intermediate2ToIntermediate1: thread ThreadIntermediate2ToIntermediate1.impl;
			ClosedTOClosed: thread Closed.impl;
	end GestionCommutateurAnalogique.impl;

	process CommutateurAnalogiqueProcess
		features
			general_ev_in: in data port;
			general_ev_out: out data port;
			handle: in event port;
	end CommutateurAnalogiqueProcess;

	process implementation CommutateurAnalogiqueProcess.impl
		subcomponents
			threads: thread group GestionCommutateurAnalogique.impl;
		connections
			CommutateurAnalogiqueProcess_impl_new_connection: port threads.general_ev_out -> general_ev_out;
			CommutateurAnalogiqueProcess_impl_new_connection2: port general_ev_in -> threads.general_ev_in;
			CommutateurAnalogiqueProcess_impl_new_connection3: port handle -> threads.handle;
	end CommutateurAnalogiqueProcess.impl;

	thread ThreadOpenToIntermediate1
	end ThreadOpenToIntermediate1;

	thread implementation ThreadOpenToIntermediate1.impl
	end ThreadOpenToIntermediate1.impl;

	thread ThreadIntermediate1ToClosed
		features
			handle: in event port;
	end ThreadIntermediate1ToClosed;

	thread implementation ThreadIntermediate1ToClosed.impl
	end ThreadIntermediate1ToClosed.impl;

	thread ThreadClosedToIntermediate2
	end ThreadClosedToIntermediate2;

	thread implementation ThreadClosedToIntermediate2.impl
	end ThreadClosedToIntermediate2.impl;

	thread ThreadIntermediate2ToOpen
	end ThreadIntermediate2ToOpen;

	thread implementation ThreadIntermediate2ToOpen.impl
	end ThreadIntermediate2ToOpen.impl;

	thread ThreadIntermediate2ToIntermediate1
		features
			handle: in event port;
	end ThreadIntermediate2ToIntermediate1;

	thread implementation ThreadIntermediate2ToIntermediate1.impl
	end ThreadIntermediate2ToIntermediate1.impl;

	thread Closed
		features
			handle: in event port;
	end Closed;

	thread implementation Closed.impl
	end Closed.impl;

	system lgsSystem
	end lgsSystem;

	system implementation lgsSystem.impl
	subcomponents
		lgsSystem_CloseDoorEvSystemImpl: system CloseDoorsEvSystem.impl;
		GeneralHydrolicFlowBus: bus PhysicalResources::HydraulicFlow;
		RetractationCircuitHydrolicBus: bus PhysicalResources::HydraulicFlow;
		RetractEvElctricalBus: bus PhysicalResources::ElectricalPower;

		lgsSystem_discrete_sensorIpml: system discrete_sensor.impl;
		lgsSystem_digitalPartImpl: system digital_part.impl;
	connections
		lgsSystem_impl_new_connection: bus access lgsSystem_CloseDoorEvSystemImpl.CloseDoorsEvSystem_Hin -> GeneralHydrolicFlowBus;
		lgsSystem_impl_new_connection2: bus access lgsSystem_CloseDoorEvSystemImpl.CloseDoorsEvSystem_Hout -> RetractationCircuitHydrolicBus;
		lgsSystem_impl_new_connection3: bus access lgsSystem_CloseDoorEvSystemImpl.RetractEvBusIn -> RetractEvElctricalBus;
		lgsSystem_impl_new_connection4: bus access lgsSystem_Discrete_sensorImpl.pressure_in -> GeneralHydrolicFlowBus;
		lgsSystem_impl_new_connection5: bus access lgsSystem_discrete_sensorIpml.pressure_in -> GeneralHydrolicFlowBus;
		lgsSystem_impl_new_connection6: port lgsSystem_discrete_sensorIpml.circuit_pressurized -> lgsSystem_digitalPartImpl.pressureCheck;
end lgsSystem.impl;

	system CloseDoorsEvSystem
		features
			CloseDoorsEvSystem_Hout: requires bus access PhysicalResources::HydraulicFlow;
			CloseDoorsEvSystem_Hin: requires bus access PhysicalResources::HydraulicFlow;
			RetractEvBusIn: requires bus access PhysicalResources::ElectricalPower;
	end CloseDoorsEvSystem;

	system implementation CloseDoorsEvSystem.impl
	end CloseDoorsEvSystem.impl;

	process CloseDoorEvProcess
	end CloseDoorEvProcess;

	process implementation CloseDoorEvProcess.impl
	end CloseDoorEvProcess.impl;

	system discrete_sensor
		features

			pressure_in: requires bus access PhysicalResources::HydraulicFlow;
			circuit_pressurized: out data port Base_Types::Boolean;
	end discrete_sensor;

	system implementation discrete_sensor.impl
	end discrete_sensor.impl;

	process discrete_sensorProcess
		features
			Mecanic_pressure_sensor: requires data access Base_Types::Float;
			circuit_pressurized: out data port Base_Types::Boolean;
	end discrete_sensorProcess;

	process implementation discrete_sensorProcess.impl
		subcomponents
			discrete_sensorProcess_thread_calculator: thread DiscreteSensor_calculator.impl;
		connections
			discrete_sensorProcess_impl_new_connection: port discrete_sensorProcess_thread_calculator.result_toBoolean -> circuit_pressurized;
			discrete_sensorProcess_impl_new_connection2: data access Mecanic_pressure_sensor -> discrete_sensorProcess_thread_calculator.float_pressureValue;
	end discrete_sensorProcess.impl;

	system implementation discrete_sensor.lgs
	end discrete_sensor.lgs;

	system implementation discrete_sensor.Im
	end discrete_sensor.Im;

	thread DiscreteSensor_calculator
		features
			result_toBoolean: out data port Base_Types::Boolean;
			float_pressureValue: requires data access;
	end DiscreteSensor_calculator;

	thread implementation DiscreteSensor_calculator.impl
	end DiscreteSensor_calculator.impl;
end lgs;